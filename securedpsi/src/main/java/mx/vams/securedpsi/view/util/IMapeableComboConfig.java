package mx.vams.securedpsi.view.util;import java.util.List;import java.util.Map;import org.eclipse.jface.viewers.ILabelProvider;import org.eclipse.jface.viewers.ILabelProviderListener;import org.eclipse.jface.viewers.IStructuredContentProvider;import org.eclipse.jface.viewers.Viewer;import org.eclipse.swt.graphics.Image;public class IMapeableComboConfig implements IStructuredContentProvider, ILabelProvider {	private static final long	serialVersionUID	= 6776556676280277832L;	private boolean				mostrarCodigo		= false;	@Override	public void dispose() {	}	@Override	public void inputChanged( Viewer arg0, Object arg1, Object arg2 ) {	}	@Override	public void addListener( ILabelProviderListener arg0 ) {	}	@Override	public boolean isLabelProperty( Object arg0, String arg1 ) {		return false;	}	@Override	public void removeListener( ILabelProviderListener arg0 ) {	}	@Override	@SuppressWarnings( "rawtypes" )	public Object [] getElements( Object mapeables ) {		if( mapeables instanceof Map ) {			Map mapa = (Map)mapeables;			return mapa.values().toArray();		} else if( mapeables instanceof List ) {			List lista = (List)mapeables;			return lista.toArray();		}		return null;	}	public void setMostrarCodigo( boolean mostrar ) {		mostrarCodigo = mostrar;	}	@Override	public Image getImage( Object arg0 ) {		return null;	}	@Override	public String getText( Object element ) {		IMapeable mapeable = (IMapeable)element;		if( mostrarCodigo ) {			return (mapeable.getCodigo() != null ? mapeable.getCodigo() : "N.E.") + " - " + (mapeable.getDescripcion() != null ? mapeable.getDescripcion() : "N.E.");		} else			return (mapeable.getDescripcion() != null ? mapeable.getDescripcion() : "N.E.");	}}